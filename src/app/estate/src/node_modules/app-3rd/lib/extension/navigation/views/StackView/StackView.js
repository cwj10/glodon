import * as React from 'react';
class StackView extends React.Component {
    constructor(props) {
        super(props)
        if (this.props.params) {
            Navigator.state.params = this.props.params;
        }
    }
    _getHeaderMode() {
        if (this.props.headerMode) {
            return this.props.headerMode;
        }
        if (Platform.OS === 'android' || this.props.mode === 'modal') {
            return 'screen';
        }
        return 'float';
    }

    _getHeaderTransitionPreset() {
        // On Android or with header mode screen, we always just use in-place,
        // we ignore the option entirely (at least until we have other presets)
        if (Platform.OS === 'android' || this._getHeaderMode() === 'screen') {
            return 'fade-in-place';
        }

        // TODO: validations: 'fade-in-place' or 'uikit' are valid
        if (this.props.headerTransitionPreset) {
            return this.props.headerTransitionPreset;
        } else {
            return 'fade-in-place';
        }
    }
    _renderHeader(scene = { descriptor: { options: { title: 'title', headerBackground: '#00b3a5' } } }, headerMode) {
        const { options } = scene.descriptor;
        const { header } = options;

        if (header === null && headerMode === 'screen') {
            return null;
        }

        // check if it's a react element
        if (React.isValidElement(header)) {
            return header;
        }

        // Handle the case where the header option is a function, and provide the default
        const renderHeader = (props => <Header {...props} />);

        const {
          headerLeftInterpolator,
          headerTitleInterpolator,
          headerRightInterpolator,
        } = this._getTransitionConfig();

        const {
            mode,
            transitionProps,
            prevTransitionProps,
            ...passProps
        } = this.props;

        return renderHeader({
            mode,
            transitionProps,
            prevTransitionProps,
            ...passProps
        });
    }
    _getTransitionConfig = () => {
        const isModal = this.props.mode === 'modal';
    
        return TransitionConfigs.getTransitionConfig(
          this.props.transitionConfig,
          this.props.transitionProps,
          this.props.prevTransitionProps,
          isModal
        );
      };

    render = () => {
        return (
            <View style={{ width: '100%', height: '100%' }}>
                {this._renderHeader()}
                <Screen navigation={Navigator}></Screen>
            </View>)
    }
}

export default StackView;