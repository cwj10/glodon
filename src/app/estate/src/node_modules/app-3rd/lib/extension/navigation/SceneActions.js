
/**
 * SCENE_KEYS.push({ key: "AboutPage", scene: screens["AboutPage"].screen });
 */
const SCENE_KEYS = []//page的相关信息                              
const SCENES = new Map();//存储所有已经渲染的page

var updateStackRouter;
const setUpdateCallback = (callback)=>{
    updateStackRouter = callback;
};


const BACK = 'Navigation/BACK';
const NAVIGATE = 'Navigation/NAVIGATE';
const POP = 'Navigation/POP';
const PUSH = 'Navigation/PUSH';
const RESET = 'Navigation/RESET';
const REPLACE = 'Navigation/REPLACE';

const back = (screens, payload = {}) => {
    let action = {
        type: BACK,
        key: payload.key,
    };
    dispatch(screens, action);
};

const navigate = (screens, payload) => {
    let action = ({
        type: NAVIGATE,
        ...payload,
    });
    dispatch(screens, action);
};

const pop = (screens, payload) => {
    let action = ({
        type: POP,
        ...payload,
    });
    dispatch(screens, action);
};

const push = (screens, payload) => {
    let action = ({
        type: PUSH,
        ...payload,
    });
    dispatch(screens, action);
};

const reset = (screens, payload) => {
    let action = ({
        type: RESET,
        ...payload,
    });
    dispatch(screens, action);
}

const replace = (screens, payload) => {
    let action = ({
        type: REPLACE,
        ...payload,
    });
    dispatch(screens, action);
}

function dispatch(screens, action) {

    let key = action.routeName;
    let params = action.params;
    switch (action.type) {
        case BACK:
            break;
        case NAVIGATE:
            SCENE_KEYS.push({ key: _generateKey(key), scene: _findScreen(screens, key) });
            updateStackRouter(params);
            break;
        case POP:

            break;
        case PUSH:
            break;
        case RESET:
            break;
        case REPLACE:
            SCENE_KEYS.pop();
            SCENE_KEYS.push({ key: _generateKey(key), scene: _findScreen(screens, key) });
            updateStackRouter(params);
            break;
        default:
            break;

    }
}


function _generateKey(key) {
    return key;
}

function _findScreen(screens, key) {
    return screens[key].screen
}

function clear() {
    SCENE_KEYS.length = 0;
    SCENES.clear();
}

export const SceneActions = {
    BACK,
    NAVIGATE,
    POP,
    PUSH,
    RESET,
    REPLACE,

    back,
    navigate,
    pop,
    push,
    reset,
    replace,
    dispatch,
    clear,
    setUpdateCallback,
}

export {
    SCENE_KEYS,
    SCENES
}