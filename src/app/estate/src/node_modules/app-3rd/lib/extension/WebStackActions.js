const BACK = 'Navigation/BACK';
const NAVIGATE = 'Navigation/NAVIGATE';
const POP = 'Navigation/POP';
const POP_TO_TOP = 'Navigation/POP_TO_TOP';
const PUSH = 'Navigation/PUSH';
const RESET = 'Navigation/RESET';
const REPLACE = 'Navigation/REPLACE';

const back = (payload = {}) => ({
    type: BACK,
    key: payload.key,
    immediate: payload.immediate,
});

const navigate = payload => {
    const action = {
        type: NAVIGATE,
        routeName: payload.routeName,
    };
    if (payload.params) {
        action.params = payload.params;
    }
    if (payload.action) {
        action.action = payload.action;
    }
    if (payload.key) {
        action.key = payload.key;
    }
    return action;
};
const pop = payload => ({
    type: POP,
    ...payload,
});

const popToTop = payload => ({
    type: POP_TO_TOP,
    ...payload,
});

const push = payload => ({
    type: PUSH,
    ...payload,
});

const reset = payload => ({
    type: RESET,
    ...payload,
});

const replace = payload => ({
    type: REPLACE,
    ...payload,
});

function dispatch(history, action) {
    // history.push("/" + payload.routeName, payload.params)
    // history.replace("/" + routeName, payload)
    // history.push(payload.routeName, payload.params)
    let path = "/" + action.routeName;
    let params = action.params;
    switch (action.type) {
        case BACK:
            history.goBack()
            break;
        case NAVIGATE:
            history.push(path, params)
            break;
        case POP:
            
            break;
        case POP_TO_TOP:
            break;
        case PUSH:
            history.push(path, params)
            break;
        case RESET:
            break;
        case REPLACE:
        console.log("replace")
            history.replace(path, params)
            break;
        default:
            break;

    }
}


export const WebStackActions = {
    BACK,
    NAVIGATE,
    POP,
    POP_TO_TOP,
    PUSH,
    RESET,
    REPLACE,

    back,
    navigate,
    pop,
    popToTop,
    push,
    reset,
    replace,
    dispatch,
};
