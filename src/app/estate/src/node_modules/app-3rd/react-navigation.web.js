import React from 'react'
import { NoMatch, Switch, Route, Link } from 'react-router'
import { View, Text, TouchableOpacity, TextInput, SafeAreaView } from 'react-native'
import * as GLD from '../../pages/pages'

// third lib
import { NavigationActions, StackActions } from './lib/react-navigation/src/react-navigation'
import { goBack, replace } from 'connected-react-router';
import { WebStackActions } from './lib/extension/WebStackActions';
const aboutCount = 0;

export function createStackNavigator(screens, configure) {
    
    const scenes = [];
    function createStackView(Screen, configure) {
        let history = configure.history;
        const Navigator = {
            state: {
                params: {}
            },
            getParam: () => { },
            setParams: () => { },
            navigator: {},

            dispatch: (action) => {
                WebStackActions.dispatch(history, action);
            },
            goBack: (payload) => {
                let action = WebStackActions.back(payload);
                WebStackActions.dispatch(history, action);
            },
            pop: (payload) => {
                let action = WebStackActions.pop(payload);
                WebStackActions.dispatch(history, action);
            },
            replace: (routeName, params) => {
                let action = WebStackActions.replace({ 'routeName': routeName, 'params': params });
                WebStackActions.dispatch(history, action);
            },
            navigate: (routeName, params) => {
                let action = WebStackActions.navigate({ 'routeName': routeName, 'params': params });
                WebStackActions.dispatch(history, action);
            },
        };
        class StackView extends React.Component {
            constructor(props) {
                super(props)
                // console.log(this.props.history.location)
                this.state = {
                    inputValue: "sss"
                }
            }

            componentWillUnmount() {
                console.log("componentWillUnmount")
            }

            render = () => {
                // alert(this.props.history.push)
                // let state = this.props.location.state;
                // Navigator.state.params = this.props.location.state;
                // let count = 0;
                // if (state && state.aboutCount) {
                //     count = state.aboutCount
                // }
                return (
                    <View style={{ width: '100%', height: '100%' }}>

                        <TextInput value={this.state.inputValue} onChangeText={(v) => { this.setState({ inputValue: v }) }}></TextInput>
                        <GLD.LoginPage />
                    </View>)
            }
        }
        return StackView;
    }

    class StackRouter extends React.Component {

        render = () => {
            let initScreen = null;
            if (configure.initialRouteName) {
                let initScreenData = screens[configure.initialRouteName];
                initScreen = <Route path={'/'} exact component={createStackView(initScreenData.screen, this.props)} />
            }
            let arrayData = [];
            for (var key in screens) {
                arrayData.push({ key: key, item: screens[key] });
            }
            return (<Switch>
                {initScreen}
                {
                    arrayData.map((item, index) => {
                        return <Route key={item + '-' + index} path={'/' + item.key} exact component={createStackView(item.item.screen, this.props)} />
                    })}
                <Route component={NoMatch} />
            </Switch>)
        }
    }

    class StackScene extends React.Component {

        render = () => {
            
            let initScreen = null;
            if (configure.initialRouteName) {
                let initScreenData = screens[configure.initialRouteName];
                console.log('11====================================');
                console.log(configure);
                console.log(initScreenData);
                console.log(screens);
                console.log('11====================================');
                scenes.push(initScreenData);
            }
            let arrayData = [];
            for (var key in screens) {
                arrayData.push({ key: key, item: screens[key] });
            }


            return (
                <SafeAreaView >
                    <View >
                        {
                            scenes.map((Screen)=>{
                                return (
                                    <Screen/>
                                )
                            })
                        }
                    </View>
                </SafeAreaView>
            )
        }
    }

    return StackScene;
}

export { NavigationActions, StackActions }